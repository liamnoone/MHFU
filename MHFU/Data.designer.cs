#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MHFU
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MHFU")]
	public partial class Data : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertCombo(Combo instance);
    partial void UpdateCombo(Combo instance);
    partial void DeleteCombo(Combo instance);
    partial void InsertType(Type instance);
    partial void UpdateType(Type instance);
    partial void DeleteType(Type instance);
    partial void InsertMonster(Monster instance);
    partial void UpdateMonster(Monster instance);
    partial void DeleteMonster(Monster instance);
    partial void InsertCarve(Carve instance);
    partial void UpdateCarve(Carve instance);
    partial void DeleteCarve(Carve instance);
    partial void InsertRank(Rank instance);
    partial void UpdateRank(Rank instance);
    partial void DeleteRank(Rank instance);
    partial void InsertVeggie_Elder(Veggie_Elder instance);
    partial void UpdateVeggie_Elder(Veggie_Elder instance);
    partial void DeleteVeggie_Elder(Veggie_Elder instance);
    partial void InsertTrenya(Trenya instance);
    partial void UpdateTrenya(Trenya instance);
    partial void DeleteTrenya(Trenya instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertSkill(Skill instance);
    partial void UpdateSkill(Skill instance);
    partial void DeleteSkill(Skill instance);
    partial void InsertDecoration_Ingredient(Decoration_Ingredient instance);
    partial void UpdateDecoration_Ingredient(Decoration_Ingredient instance);
    partial void DeleteDecoration_Ingredient(Decoration_Ingredient instance);
    partial void InsertDecoration(Decoration instance);
    partial void UpdateDecoration(Decoration instance);
    partial void DeleteDecoration(Decoration instance);
    partial void InsertSkill_Tree(Skill_Tree instance);
    partial void UpdateSkill_Tree(Skill_Tree instance);
    partial void DeleteSkill_Tree(Skill_Tree instance);
    #endregion
		
		public Data() : 
				base(global::MHFU.Properties.Settings.Default.MHFUConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Data(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Data(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Data(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Data(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Combo> Combos
		{
			get
			{
				return this.GetTable<Combo>();
			}
		}
		
		public System.Data.Linq.Table<Type> Types
		{
			get
			{
				return this.GetTable<Type>();
			}
		}
		
		public System.Data.Linq.Table<Monster> Monsters
		{
			get
			{
				return this.GetTable<Monster>();
			}
		}
		
		public System.Data.Linq.Table<Carve> Carves
		{
			get
			{
				return this.GetTable<Carve>();
			}
		}
		
		public System.Data.Linq.Table<Rank> Ranks
		{
			get
			{
				return this.GetTable<Rank>();
			}
		}
		
		public System.Data.Linq.Table<Veggie_Elder> Veggie_Elders
		{
			get
			{
				return this.GetTable<Veggie_Elder>();
			}
		}
		
		public System.Data.Linq.Table<Trenya> Trenyas
		{
			get
			{
				return this.GetTable<Trenya>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Skill> Skills
		{
			get
			{
				return this.GetTable<Skill>();
			}
		}
		
		public System.Data.Linq.Table<Decoration_Ingredient> Decoration_Ingredients
		{
			get
			{
				return this.GetTable<Decoration_Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<Decoration> Decorations
		{
			get
			{
				return this.GetTable<Decoration>();
			}
		}
		
		public System.Data.Linq.Table<Skill_Tree> Skill_Trees
		{
			get
			{
				return this.GetTable<Skill_Tree>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="items.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private byte _Rarity;
		
		private string _Icon;
		
		private System.Nullable<long> _Buy;
		
		private System.Nullable<long> _Sell;
		
		private bool _Quest_Only;
		
		private EntitySet<Combo> _Combos;
		
		private EntitySet<Combo> _Combos1;
		
		private EntitySet<Combo> _Combos2;
		
		private EntitySet<Carve> _Carves;
		
		private EntitySet<Veggie_Elder> _Veggie_Elders;
		
		private EntitySet<Veggie_Elder> _Veggie_Elders1;
		
		private EntitySet<Veggie_Elder> _Veggie_Elders2;
		
		private EntitySet<Decoration_Ingredient> _Decoration_Ingredients;
		
		private EntitySet<Decoration> _Decorations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRarityChanging(byte value);
    partial void OnRarityChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnBuyChanging(System.Nullable<long> value);
    partial void OnBuyChanged();
    partial void OnSellChanging(System.Nullable<long> value);
    partial void OnSellChanged();
    partial void OnQuest_OnlyChanging(bool value);
    partial void OnQuest_OnlyChanged();
    #endregion
		
		public Item()
		{
			this._Combos = new EntitySet<Combo>(new Action<Combo>(this.attach_Combos), new Action<Combo>(this.detach_Combos));
			this._Combos1 = new EntitySet<Combo>(new Action<Combo>(this.attach_Combos1), new Action<Combo>(this.detach_Combos1));
			this._Combos2 = new EntitySet<Combo>(new Action<Combo>(this.attach_Combos2), new Action<Combo>(this.detach_Combos2));
			this._Carves = new EntitySet<Carve>(new Action<Carve>(this.attach_Carves), new Action<Carve>(this.detach_Carves));
			this._Veggie_Elders = new EntitySet<Veggie_Elder>(new Action<Veggie_Elder>(this.attach_Veggie_Elders), new Action<Veggie_Elder>(this.detach_Veggie_Elders));
			this._Veggie_Elders1 = new EntitySet<Veggie_Elder>(new Action<Veggie_Elder>(this.attach_Veggie_Elders1), new Action<Veggie_Elder>(this.detach_Veggie_Elders1));
			this._Veggie_Elders2 = new EntitySet<Veggie_Elder>(new Action<Veggie_Elder>(this.attach_Veggie_Elders2), new Action<Veggie_Elder>(this.detach_Veggie_Elders2));
			this._Decoration_Ingredients = new EntitySet<Decoration_Ingredient>(new Action<Decoration_Ingredient>(this.attach_Decoration_Ingredients), new Action<Decoration_Ingredient>(this.detach_Decoration_Ingredients));
			this._Decorations = new EntitySet<Decoration>(new Action<Decoration>(this.attach_Decorations), new Action<Decoration>(this.detach_Decorations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(17) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rarity", DbType="TinyInt NOT NULL")]
		public byte Rarity
		{
			get
			{
				return this._Rarity;
			}
			set
			{
				if ((this._Rarity != value))
				{
					this.OnRarityChanging(value);
					this.SendPropertyChanging();
					this._Rarity = value;
					this.SendPropertyChanged("Rarity");
					this.OnRarityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="VarChar(17) NOT NULL", CanBeNull=false)]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Buy", DbType="BigInt")]
		public System.Nullable<long> Buy
		{
			get
			{
				return this._Buy;
			}
			set
			{
				if ((this._Buy != value))
				{
					this.OnBuyChanging(value);
					this.SendPropertyChanging();
					this._Buy = value;
					this.SendPropertyChanged("Buy");
					this.OnBuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sell", DbType="BigInt")]
		public System.Nullable<long> Sell
		{
			get
			{
				return this._Sell;
			}
			set
			{
				if ((this._Sell != value))
				{
					this.OnSellChanging(value);
					this.SendPropertyChanging();
					this._Sell = value;
					this.SendPropertyChanged("Sell");
					this.OnSellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Quest Only]", Storage="_Quest_Only", DbType="Bit NOT NULL")]
		public bool Quest_Only
		{
			get
			{
				return this._Quest_Only;
			}
			set
			{
				if ((this._Quest_Only != value))
				{
					this.OnQuest_OnlyChanging(value);
					this.SendPropertyChanging();
					this._Quest_Only = value;
					this.SendPropertyChanged("Quest_Only");
					this.OnQuest_OnlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Combo", Storage="_Combos", ThisKey="ID", OtherKey="Result")]
		public EntitySet<Combo> Combos
		{
			get
			{
				return this._Combos;
			}
			set
			{
				this._Combos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Combo1", Storage="_Combos1", ThisKey="ID", OtherKey="ItemA")]
		public EntitySet<Combo> Combos1
		{
			get
			{
				return this._Combos1;
			}
			set
			{
				this._Combos1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Combo2", Storage="_Combos2", ThisKey="ID", OtherKey="ItemB")]
		public EntitySet<Combo> Combos2
		{
			get
			{
				return this._Combos2;
			}
			set
			{
				this._Combos2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Carve", Storage="_Carves", ThisKey="ID", OtherKey="Item")]
		public EntitySet<Carve> Carves
		{
			get
			{
				return this._Carves;
			}
			set
			{
				this._Carves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Veggie_Elder", Storage="_Veggie_Elders", ThisKey="ID", OtherKey="Common")]
		public EntitySet<Veggie_Elder> Veggie_Elders
		{
			get
			{
				return this._Veggie_Elders;
			}
			set
			{
				this._Veggie_Elders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Veggie_Elder1", Storage="_Veggie_Elders1", ThisKey="ID", OtherKey="Rare")]
		public EntitySet<Veggie_Elder> Veggie_Elders1
		{
			get
			{
				return this._Veggie_Elders1;
			}
			set
			{
				this._Veggie_Elders1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Veggie_Elder2", Storage="_Veggie_Elders2", ThisKey="ID", OtherKey="Trade")]
		public EntitySet<Veggie_Elder> Veggie_Elders2
		{
			get
			{
				return this._Veggie_Elders2;
			}
			set
			{
				this._Veggie_Elders2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Decoration_Ingredient", Storage="_Decoration_Ingredients", ThisKey="ID", OtherKey="Ingredient")]
		public EntitySet<Decoration_Ingredient> Decoration_Ingredients
		{
			get
			{
				return this._Decoration_Ingredients;
			}
			set
			{
				this._Decoration_Ingredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Decoration", Storage="_Decorations", ThisKey="ID", OtherKey="Item")]
		public EntitySet<Decoration> Decorations
		{
			get
			{
				return this._Decorations;
			}
			set
			{
				this._Decorations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Combos(Combo entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Combos(Combo entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Combos1(Combo entity)
		{
			this.SendPropertyChanging();
			entity.Item1 = this;
		}
		
		private void detach_Combos1(Combo entity)
		{
			this.SendPropertyChanging();
			entity.Item1 = null;
		}
		
		private void attach_Combos2(Combo entity)
		{
			this.SendPropertyChanging();
			entity.Item2 = this;
		}
		
		private void detach_Combos2(Combo entity)
		{
			this.SendPropertyChanging();
			entity.Item2 = null;
		}
		
		private void attach_Carves(Carve entity)
		{
			this.SendPropertyChanging();
			entity.Item1 = this;
		}
		
		private void detach_Carves(Carve entity)
		{
			this.SendPropertyChanging();
			entity.Item1 = null;
		}
		
		private void attach_Veggie_Elders(Veggie_Elder entity)
		{
			this.SendPropertyChanging();
			entity.CommonItem = this;
		}
		
		private void detach_Veggie_Elders(Veggie_Elder entity)
		{
			this.SendPropertyChanging();
			entity.CommonItem = null;
		}
		
		private void attach_Veggie_Elders1(Veggie_Elder entity)
		{
			this.SendPropertyChanging();
			entity.RareItem = this;
		}
		
		private void detach_Veggie_Elders1(Veggie_Elder entity)
		{
			this.SendPropertyChanging();
			entity.RareItem = null;
		}
		
		private void attach_Veggie_Elders2(Veggie_Elder entity)
		{
			this.SendPropertyChanging();
			entity.TradeItem = this;
		}
		
		private void detach_Veggie_Elders2(Veggie_Elder entity)
		{
			this.SendPropertyChanging();
			entity.TradeItem = null;
		}
		
		private void attach_Decoration_Ingredients(Decoration_Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Dec_Ingredient = this;
		}
		
		private void detach_Decoration_Ingredients(Decoration_Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Dec_Ingredient = null;
		}
		
		private void attach_Decorations(Decoration entity)
		{
			this.SendPropertyChanging();
			entity.Item1 = this;
		}
		
		private void detach_Decorations(Decoration entity)
		{
			this.SendPropertyChanging();
			entity.Item1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="items.Combo")]
	public partial class Combo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Result;
		
		private int _ItemA;
		
		private int _ItemB;
		
		private byte _Success;
		
		private string _Quantity;
		
		private bool _Alchemy;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Item> _Item1;
		
		private EntityRef<Item> _Item2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnResultChanging(int value);
    partial void OnResultChanged();
    partial void OnItemAChanging(int value);
    partial void OnItemAChanged();
    partial void OnItemBChanging(int value);
    partial void OnItemBChanged();
    partial void OnSuccessChanging(byte value);
    partial void OnSuccessChanged();
    partial void OnQuantityChanging(string value);
    partial void OnQuantityChanged();
    partial void OnAlchemyChanging(bool value);
    partial void OnAlchemyChanged();
    #endregion
		
		public Combo()
		{
			this._Item = default(EntityRef<Item>);
			this._Item1 = default(EntityRef<Item>);
			this._Item2 = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="Int NOT NULL")]
		public int Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemA", DbType="Int NOT NULL")]
		public int ItemA
		{
			get
			{
				return this._ItemA;
			}
			set
			{
				if ((this._ItemA != value))
				{
					if (this._Item1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemAChanging(value);
					this.SendPropertyChanging();
					this._ItemA = value;
					this.SendPropertyChanged("ItemA");
					this.OnItemAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemB", DbType="Int NOT NULL")]
		public int ItemB
		{
			get
			{
				return this._ItemB;
			}
			set
			{
				if ((this._ItemB != value))
				{
					if (this._Item2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemBChanging(value);
					this.SendPropertyChanging();
					this._ItemB = value;
					this.SendPropertyChanged("ItemB");
					this.OnItemBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Success", DbType="TinyInt NOT NULL")]
		public byte Success
		{
			get
			{
				return this._Success;
			}
			set
			{
				if ((this._Success != value))
				{
					this.OnSuccessChanging(value);
					this.SendPropertyChanging();
					this._Success = value;
					this.SendPropertyChanged("Success");
					this.OnSuccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alchemy", DbType="Bit NOT NULL")]
		public bool Alchemy
		{
			get
			{
				return this._Alchemy;
			}
			set
			{
				if ((this._Alchemy != value))
				{
					this.OnAlchemyChanging(value);
					this.SendPropertyChanging();
					this._Alchemy = value;
					this.SendPropertyChanged("Alchemy");
					this.OnAlchemyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Combo", Storage="_Item", ThisKey="Result", OtherKey="ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Combos.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Combos.Add(this);
						this._Result = value.ID;
					}
					else
					{
						this._Result = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Combo1", Storage="_Item1", ThisKey="ItemA", OtherKey="ID", IsForeignKey=true)]
		public Item Item1
		{
			get
			{
				return this._Item1.Entity;
			}
			set
			{
				Item previousValue = this._Item1.Entity;
				if (((previousValue != value) 
							|| (this._Item1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item1.Entity = null;
						previousValue.Combos1.Remove(this);
					}
					this._Item1.Entity = value;
					if ((value != null))
					{
						value.Combos1.Add(this);
						this._ItemA = value.ID;
					}
					else
					{
						this._ItemA = default(int);
					}
					this.SendPropertyChanged("Item1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Combo2", Storage="_Item2", ThisKey="ItemB", OtherKey="ID", IsForeignKey=true)]
		public Item Item2
		{
			get
			{
				return this._Item2.Entity;
			}
			set
			{
				Item previousValue = this._Item2.Entity;
				if (((previousValue != value) 
							|| (this._Item2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item2.Entity = null;
						previousValue.Combos2.Remove(this);
					}
					this._Item2.Entity = value;
					if ((value != null))
					{
						value.Combos2.Add(this);
						this._ItemB = value.ID;
					}
					else
					{
						this._ItemB = default(int);
					}
					this.SendPropertyChanged("Item2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="monsters.Type")]
	public partial class Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Species;
		
		private EntitySet<Monster> _Monsters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSpeciesChanging(string value);
    partial void OnSpeciesChanged();
    #endregion
		
		public Type()
		{
			this._Monsters = new EntitySet<Monster>(new Action<Monster>(this.attach_Monsters), new Action<Monster>(this.detach_Monsters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Species", DbType="VarChar(13) NOT NULL", CanBeNull=false)]
		public string Species
		{
			get
			{
				return this._Species;
			}
			set
			{
				if ((this._Species != value))
				{
					this.OnSpeciesChanging(value);
					this.SendPropertyChanging();
					this._Species = value;
					this.SendPropertyChanged("Species");
					this.OnSpeciesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Monster", Storage="_Monsters", ThisKey="ID", OtherKey="Species")]
		public EntitySet<Monster> Monsters
		{
			get
			{
				return this._Monsters;
			}
			set
			{
				this._Monsters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Monsters(Monster entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_Monsters(Monster entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="monsters.Monster")]
	public partial class Monster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _Species;
		
		private System.Nullable<float> _Min_Length;
		
		private System.Nullable<float> _Max_Length;
		
		private EntitySet<Carve> _Carves;
		
		private EntityRef<Type> _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSpeciesChanging(int value);
    partial void OnSpeciesChanged();
    partial void OnMin_LengthChanging(System.Nullable<float> value);
    partial void OnMin_LengthChanged();
    partial void OnMax_LengthChanging(System.Nullable<float> value);
    partial void OnMax_LengthChanged();
    #endregion
		
		public Monster()
		{
			this._Carves = new EntitySet<Carve>(new Action<Carve>(this.attach_Carves), new Action<Carve>(this.detach_Carves));
			this._Type = default(EntityRef<Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Species", DbType="Int NOT NULL")]
		public int Species
		{
			get
			{
				return this._Species;
			}
			set
			{
				if ((this._Species != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpeciesChanging(value);
					this.SendPropertyChanging();
					this._Species = value;
					this.SendPropertyChanged("Species");
					this.OnSpeciesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Min Length]", Storage="_Min_Length", DbType="Real")]
		public System.Nullable<float> Min_Length
		{
			get
			{
				return this._Min_Length;
			}
			set
			{
				if ((this._Min_Length != value))
				{
					this.OnMin_LengthChanging(value);
					this.SendPropertyChanging();
					this._Min_Length = value;
					this.SendPropertyChanged("Min_Length");
					this.OnMin_LengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Max Length]", Storage="_Max_Length", DbType="Real")]
		public System.Nullable<float> Max_Length
		{
			get
			{
				return this._Max_Length;
			}
			set
			{
				if ((this._Max_Length != value))
				{
					this.OnMax_LengthChanging(value);
					this.SendPropertyChanging();
					this._Max_Length = value;
					this.SendPropertyChanged("Max_Length");
					this.OnMax_LengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Monster_Carve", Storage="_Carves", ThisKey="ID", OtherKey="Monster")]
		public EntitySet<Carve> Carves
		{
			get
			{
				return this._Carves;
			}
			set
			{
				this._Carves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Monster", Storage="_Type", ThisKey="Species", OtherKey="ID", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.Monsters.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.Monsters.Add(this);
						this._Species = value.ID;
					}
					else
					{
						this._Species = default(int);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Carves(Carve entity)
		{
			this.SendPropertyChanging();
			entity.Monster1 = this;
		}
		
		private void detach_Carves(Carve entity)
		{
			this.SendPropertyChanging();
			entity.Monster1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="monsters.Carve")]
	public partial class Carve : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Monster;
		
		private int _Item;
		
		private string _Source;
		
		private byte _Quantity;
		
		private byte _Rate;
		
		private byte _Rank;
		
		private EntityRef<Item> _Item1;
		
		private EntityRef<Monster> _Monster1;
		
		private EntityRef<Rank> _Rank1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMonsterChanging(int value);
    partial void OnMonsterChanged();
    partial void OnItemChanging(int value);
    partial void OnItemChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnQuantityChanging(byte value);
    partial void OnQuantityChanged();
    partial void OnRateChanging(byte value);
    partial void OnRateChanged();
    partial void OnRankChanging(byte value);
    partial void OnRankChanged();
    #endregion
		
		public Carve()
		{
			this._Item1 = default(EntityRef<Item>);
			this._Monster1 = default(EntityRef<Monster>);
			this._Rank1 = default(EntityRef<Rank>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monster", DbType="Int NOT NULL")]
		public int Monster
		{
			get
			{
				return this._Monster;
			}
			set
			{
				if ((this._Monster != value))
				{
					if (this._Monster1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMonsterChanging(value);
					this.SendPropertyChanging();
					this._Monster = value;
					this.SendPropertyChanged("Monster");
					this.OnMonsterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item", DbType="Int NOT NULL")]
		public int Item
		{
			get
			{
				return this._Item;
			}
			set
			{
				if ((this._Item != value))
				{
					if (this._Item1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemChanging(value);
					this.SendPropertyChanging();
					this._Item = value;
					this.SendPropertyChanged("Item");
					this.OnItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="TinyInt NOT NULL")]
		public byte Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="TinyInt NOT NULL")]
		public byte Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="TinyInt NOT NULL")]
		public byte Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					if (this._Rank1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Carve", Storage="_Item1", ThisKey="Item", OtherKey="ID", IsForeignKey=true)]
		public Item Item1
		{
			get
			{
				return this._Item1.Entity;
			}
			set
			{
				Item previousValue = this._Item1.Entity;
				if (((previousValue != value) 
							|| (this._Item1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item1.Entity = null;
						previousValue.Carves.Remove(this);
					}
					this._Item1.Entity = value;
					if ((value != null))
					{
						value.Carves.Add(this);
						this._Item = value.ID;
					}
					else
					{
						this._Item = default(int);
					}
					this.SendPropertyChanged("Item1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Monster_Carve", Storage="_Monster1", ThisKey="Monster", OtherKey="ID", IsForeignKey=true)]
		public Monster Monster1
		{
			get
			{
				return this._Monster1.Entity;
			}
			set
			{
				Monster previousValue = this._Monster1.Entity;
				if (((previousValue != value) 
							|| (this._Monster1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Monster1.Entity = null;
						previousValue.Carves.Remove(this);
					}
					this._Monster1.Entity = value;
					if ((value != null))
					{
						value.Carves.Add(this);
						this._Monster = value.ID;
					}
					else
					{
						this._Monster = default(int);
					}
					this.SendPropertyChanged("Monster1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Carve", Storage="_Rank1", ThisKey="Rank", OtherKey="ID", IsForeignKey=true)]
		public Rank Rank1
		{
			get
			{
				return this._Rank1.Entity;
			}
			set
			{
				Rank previousValue = this._Rank1.Entity;
				if (((previousValue != value) 
							|| (this._Rank1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank1.Entity = null;
						previousValue.Carves.Remove(this);
					}
					this._Rank1.Entity = value;
					if ((value != null))
					{
						value.Carves.Add(this);
						this._Rank = value.ID;
					}
					else
					{
						this._Rank = default(byte);
					}
					this.SendPropertyChanged("Rank1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank")]
	public partial class Rank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ID;
		
		private string _Name;
		
		private EntitySet<Carve> _Carves;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Rank()
		{
			this._Carves = new EntitySet<Carve>(new Action<Carve>(this.attach_Carves), new Action<Carve>(this.detach_Carves));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(9) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Carve", Storage="_Carves", ThisKey="ID", OtherKey="Rank")]
		public EntitySet<Carve> Carves
		{
			get
			{
				return this._Carves;
			}
			set
			{
				this._Carves.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Carves(Carve entity)
		{
			this.SendPropertyChanging();
			entity.Rank1 = this;
		}
		
		private void detach_Carves(Carve entity)
		{
			this.SendPropertyChanging();
			entity.Rank1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="items.[Veggie Elder]")]
	public partial class Veggie_Elder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Area;
		
		private int _Trade;
		
		private int _Common;
		
		private int _Rare;
		
		private EntityRef<Item> _CommonItem;
		
		private EntityRef<Item> _RareItem;
		
		private EntityRef<Item> _TradeItem;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAreaChanging(int value);
    partial void OnAreaChanged();
    partial void OnTradeChanging(int value);
    partial void OnTradeChanged();
    partial void OnCommonChanging(int value);
    partial void OnCommonChanged();
    partial void OnRareChanging(int value);
    partial void OnRareChanged();
    #endregion
		
		public Veggie_Elder()
		{
			this._CommonItem = default(EntityRef<Item>);
			this._RareItem = default(EntityRef<Item>);
			this._TradeItem = default(EntityRef<Item>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Int NOT NULL")]
		public int Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trade", DbType="Int NOT NULL")]
		public int Trade
		{
			get
			{
				return this._Trade;
			}
			set
			{
				if ((this._Trade != value))
				{
					if (this._TradeItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTradeChanging(value);
					this.SendPropertyChanging();
					this._Trade = value;
					this.SendPropertyChanged("Trade");
					this.OnTradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Common", DbType="Int NOT NULL")]
		public int Common
		{
			get
			{
				return this._Common;
			}
			set
			{
				if ((this._Common != value))
				{
					if (this._CommonItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommonChanging(value);
					this.SendPropertyChanging();
					this._Common = value;
					this.SendPropertyChanged("Common");
					this.OnCommonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rare", DbType="Int NOT NULL")]
		public int Rare
		{
			get
			{
				return this._Rare;
			}
			set
			{
				if ((this._Rare != value))
				{
					if (this._RareItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRareChanging(value);
					this.SendPropertyChanging();
					this._Rare = value;
					this.SendPropertyChanged("Rare");
					this.OnRareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Veggie_Elder", Storage="_CommonItem", ThisKey="Common", OtherKey="ID", IsForeignKey=true)]
		public Item CommonItem
		{
			get
			{
				return this._CommonItem.Entity;
			}
			set
			{
				Item previousValue = this._CommonItem.Entity;
				if (((previousValue != value) 
							|| (this._CommonItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommonItem.Entity = null;
						previousValue.Veggie_Elders.Remove(this);
					}
					this._CommonItem.Entity = value;
					if ((value != null))
					{
						value.Veggie_Elders.Add(this);
						this._Common = value.ID;
					}
					else
					{
						this._Common = default(int);
					}
					this.SendPropertyChanged("CommonItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Veggie_Elder1", Storage="_RareItem", ThisKey="Rare", OtherKey="ID", IsForeignKey=true)]
		public Item RareItem
		{
			get
			{
				return this._RareItem.Entity;
			}
			set
			{
				Item previousValue = this._RareItem.Entity;
				if (((previousValue != value) 
							|| (this._RareItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RareItem.Entity = null;
						previousValue.Veggie_Elders1.Remove(this);
					}
					this._RareItem.Entity = value;
					if ((value != null))
					{
						value.Veggie_Elders1.Add(this);
						this._Rare = value.ID;
					}
					else
					{
						this._Rare = default(int);
					}
					this.SendPropertyChanged("RareItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Veggie_Elder2", Storage="_TradeItem", ThisKey="Trade", OtherKey="ID", IsForeignKey=true)]
		public Item TradeItem
		{
			get
			{
				return this._TradeItem.Entity;
			}
			set
			{
				Item previousValue = this._TradeItem.Entity;
				if (((previousValue != value) 
							|| (this._TradeItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TradeItem.Entity = null;
						previousValue.Veggie_Elders2.Remove(this);
					}
					this._TradeItem.Entity = value;
					if ((value != null))
					{
						value.Veggie_Elders2.Add(this);
						this._Trade = value.ID;
					}
					else
					{
						this._Trade = default(int);
					}
					this.SendPropertyChanged("TradeItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Veggie_Elder", Storage="_Location", ThisKey="Area", OtherKey="ID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Veggie_Elders.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Veggie_Elders.Add(this);
						this._Area = value.ID;
					}
					else
					{
						this._Area = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="items.Trenya")]
	public partial class Trenya : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Location;
		
		private System.Nullable<int> _Points;
		
		private string _General;
		
		private string _Mineral;
		
		private string _Fish;
		
		private string _Insect;
		
		private string _Unique;
		
		private string _Monster;
		
		private string _Jewel;
		
		private EntityRef<Location> _Loc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLocationChanging(System.Nullable<int> value);
    partial void OnLocationChanged();
    partial void OnPointsChanging(System.Nullable<int> value);
    partial void OnPointsChanged();
    partial void OnGeneralChanging(string value);
    partial void OnGeneralChanged();
    partial void OnMineralChanging(string value);
    partial void OnMineralChanged();
    partial void OnFishChanging(string value);
    partial void OnFishChanged();
    partial void OnInsectChanging(string value);
    partial void OnInsectChanged();
    partial void OnUniqueChanging(string value);
    partial void OnUniqueChanged();
    partial void OnMonsterChanging(string value);
    partial void OnMonsterChanged();
    partial void OnJewelChanging(string value);
    partial void OnJewelChanged();
    #endregion
		
		public Trenya()
		{
			this._Loc = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="Int")]
		public System.Nullable<int> Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					if (this._Loc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int")]
		public System.Nullable<int> Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_General", DbType="NVarChar(MAX)")]
		public string General
		{
			get
			{
				return this._General;
			}
			set
			{
				if ((this._General != value))
				{
					this.OnGeneralChanging(value);
					this.SendPropertyChanging();
					this._General = value;
					this.SendPropertyChanged("General");
					this.OnGeneralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mineral", DbType="NVarChar(MAX)")]
		public string Mineral
		{
			get
			{
				return this._Mineral;
			}
			set
			{
				if ((this._Mineral != value))
				{
					this.OnMineralChanging(value);
					this.SendPropertyChanging();
					this._Mineral = value;
					this.SendPropertyChanged("Mineral");
					this.OnMineralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fish", DbType="NVarChar(MAX)")]
		public string Fish
		{
			get
			{
				return this._Fish;
			}
			set
			{
				if ((this._Fish != value))
				{
					this.OnFishChanging(value);
					this.SendPropertyChanging();
					this._Fish = value;
					this.SendPropertyChanged("Fish");
					this.OnFishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Insect", DbType="NVarChar(MAX)")]
		public string Insect
		{
			get
			{
				return this._Insect;
			}
			set
			{
				if ((this._Insect != value))
				{
					this.OnInsectChanging(value);
					this.SendPropertyChanging();
					this._Insect = value;
					this.SendPropertyChanged("Insect");
					this.OnInsectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Unique]", Storage="_Unique", DbType="NVarChar(MAX)")]
		public string Unique
		{
			get
			{
				return this._Unique;
			}
			set
			{
				if ((this._Unique != value))
				{
					this.OnUniqueChanging(value);
					this.SendPropertyChanging();
					this._Unique = value;
					this.SendPropertyChanged("Unique");
					this.OnUniqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monster", DbType="NVarChar(MAX)")]
		public string Monster
		{
			get
			{
				return this._Monster;
			}
			set
			{
				if ((this._Monster != value))
				{
					this.OnMonsterChanging(value);
					this.SendPropertyChanging();
					this._Monster = value;
					this.SendPropertyChanged("Monster");
					this.OnMonsterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Jewel", DbType="NVarChar(MAX)")]
		public string Jewel
		{
			get
			{
				return this._Jewel;
			}
			set
			{
				if ((this._Jewel != value))
				{
					this.OnJewelChanging(value);
					this.SendPropertyChanging();
					this._Jewel = value;
					this.SendPropertyChanged("Jewel");
					this.OnJewelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Trenya", Storage="_Loc", ThisKey="Location", OtherKey="ID", IsForeignKey=true)]
		public Location Loc
		{
			get
			{
				return this._Loc.Entity;
			}
			set
			{
				Location previousValue = this._Loc.Entity;
				if (((previousValue != value) 
							|| (this._Loc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Loc.Entity = null;
						previousValue.Trenyas.Remove(this);
					}
					this._Loc.Entity = value;
					if ((value != null))
					{
						value.Trenyas.Add(this);
						this._Location = value.ID;
					}
					else
					{
						this._Location = default(Nullable<int>);
					}
					this.SendPropertyChanged("Loc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Loc;
		
		private EntitySet<Veggie_Elder> _Veggie_Elders;
		
		private EntitySet<Trenya> _Trenyas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLocChanging(string value);
    partial void OnLocChanged();
    #endregion
		
		public Location()
		{
			this._Veggie_Elders = new EntitySet<Veggie_Elder>(new Action<Veggie_Elder>(this.attach_Veggie_Elders), new Action<Veggie_Elder>(this.detach_Veggie_Elders));
			this._Trenyas = new EntitySet<Trenya>(new Action<Trenya>(this.attach_Trenyas), new Action<Trenya>(this.detach_Trenyas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Location", Storage="_Loc", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
		public string Loc
		{
			get
			{
				return this._Loc;
			}
			set
			{
				if ((this._Loc != value))
				{
					this.OnLocChanging(value);
					this.SendPropertyChanging();
					this._Loc = value;
					this.SendPropertyChanged("Loc");
					this.OnLocChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Veggie_Elder", Storage="_Veggie_Elders", ThisKey="ID", OtherKey="Area")]
		public EntitySet<Veggie_Elder> Veggie_Elders
		{
			get
			{
				return this._Veggie_Elders;
			}
			set
			{
				this._Veggie_Elders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Trenya", Storage="_Trenyas", ThisKey="ID", OtherKey="Location")]
		public EntitySet<Trenya> Trenyas
		{
			get
			{
				return this._Trenyas;
			}
			set
			{
				this._Trenyas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Veggie_Elders(Veggie_Elder entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Veggie_Elders(Veggie_Elder entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_Trenyas(Trenya entity)
		{
			this.SendPropertyChanging();
			entity.Loc = this;
		}
		
		private void detach_Trenyas(Trenya entity)
		{
			this.SendPropertyChanging();
			entity.Loc = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="skills.Skill")]
	public partial class Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Tree;
		
		private string _Skill1;
		
		private System.Nullable<short> _Points;
		
		private EntityRef<Skill_Tree> _Skill_Tree;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTreeChanging(int value);
    partial void OnTreeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPointsChanging(System.Nullable<short> value);
    partial void OnPointsChanged();
    #endregion
		
		public Skill()
		{
			this._Skill_Tree = default(EntityRef<Skill_Tree>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tree", DbType="Int NOT NULL")]
		public int Tree
		{
			get
			{
				return this._Tree;
			}
			set
			{
				if ((this._Tree != value))
				{
					if (this._Skill_Tree.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTreeChanging(value);
					this.SendPropertyChanging();
					this._Tree = value;
					this.SendPropertyChanged("Tree");
					this.OnTreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Skill", Storage="_Skill1", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Skill1;
			}
			set
			{
				if ((this._Skill1 != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Skill1 = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="SmallInt")]
		public System.Nullable<short> Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Tree_Skill", Storage="_Skill_Tree", ThisKey="Tree", OtherKey="ID", IsForeignKey=true)]
		public Skill_Tree Skill_Tree
		{
			get
			{
				return this._Skill_Tree.Entity;
			}
			set
			{
				Skill_Tree previousValue = this._Skill_Tree.Entity;
				if (((previousValue != value) 
							|| (this._Skill_Tree.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill_Tree.Entity = null;
						previousValue.Skills.Remove(this);
					}
					this._Skill_Tree.Entity = value;
					if ((value != null))
					{
						value.Skills.Add(this);
						this._Tree = value.ID;
					}
					else
					{
						this._Tree = default(int);
					}
					this.SendPropertyChanged("Skill_Tree");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="skills.[Decoration Ingredient]")]
	public partial class Decoration_Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Decoration;
		
		private int _Ingredient;
		
		private short _Quantity;
		
		private bool _Alt;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Decoration> _Dec;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDecorationChanging(int value);
    partial void OnDecorationChanged();
    partial void OnIngredientChanging(int value);
    partial void OnIngredientChanged();
    partial void OnQuantityChanging(short value);
    partial void OnQuantityChanged();
    partial void OnAltChanging(bool value);
    partial void OnAltChanged();
    #endregion
		
		public Decoration_Ingredient()
		{
			this._Item = default(EntityRef<Item>);
			this._Dec = default(EntityRef<Decoration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Decoration", DbType="Int NOT NULL")]
		public int Decoration
		{
			get
			{
				return this._Decoration;
			}
			set
			{
				if ((this._Decoration != value))
				{
					if (this._Dec.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDecorationChanging(value);
					this.SendPropertyChanging();
					this._Decoration = value;
					this.SendPropertyChanged("Decoration");
					this.OnDecorationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient", DbType="Int NOT NULL")]
		public int Ingredient
		{
			get
			{
				return this._Ingredient;
			}
			set
			{
				if ((this._Ingredient != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredientChanging(value);
					this.SendPropertyChanging();
					this._Ingredient = value;
					this.SendPropertyChanged("Ingredient");
					this.OnIngredientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="SmallInt NOT NULL")]
		public short Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alt", DbType="Bit NOT NULL")]
		public bool Alt
		{
			get
			{
				return this._Alt;
			}
			set
			{
				if ((this._Alt != value))
				{
					this.OnAltChanging(value);
					this.SendPropertyChanging();
					this._Alt = value;
					this.SendPropertyChanged("Alt");
					this.OnAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Decoration_Ingredient", Storage="_Item", ThisKey="Ingredient", OtherKey="ID", IsForeignKey=true)]
		public Item Dec_Ingredient
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Decoration_Ingredients.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Decoration_Ingredients.Add(this);
						this._Ingredient = value.ID;
					}
					else
					{
						this._Ingredient = default(int);
					}
					this.SendPropertyChanged("Dec_Ingredient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Decoration_Decoration_Ingredient", Storage="_Dec", ThisKey="Decoration", OtherKey="ID", IsForeignKey=true)]
		public Decoration Dec
		{
			get
			{
				return this._Dec.Entity;
			}
			set
			{
				Decoration previousValue = this._Dec.Entity;
				if (((previousValue != value) 
							|| (this._Dec.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dec.Entity = null;
						previousValue.Decoration_Ingredients.Remove(this);
					}
					this._Dec.Entity = value;
					if ((value != null))
					{
						value.Decoration_Ingredients.Add(this);
						this._Decoration = value.ID;
					}
					else
					{
						this._Decoration = default(int);
					}
					this.SendPropertyChanged("Dec");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="skills.Decoration")]
	public partial class Decoration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Item;
		
		private byte _Slots;
		
		private int _Skill_A;
		
		private short _Skill_A_Points;
		
		private System.Nullable<int> _Skill_B;
		
		private System.Nullable<short> _Skill_B_Points;
		
		private EntitySet<Decoration_Ingredient> _Decoration_Ingredients;
		
		private EntityRef<Item> _Item1;
		
		private EntityRef<Skill_Tree> _SkillA;
		
		private EntityRef<Skill_Tree> _SkillB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemChanging(int value);
    partial void OnItemChanged();
    partial void OnSlotsChanging(byte value);
    partial void OnSlotsChanged();
    partial void OnSkill_AChanging(int value);
    partial void OnSkill_AChanged();
    partial void OnSkill_A_PointsChanging(short value);
    partial void OnSkill_A_PointsChanged();
    partial void OnSkill_BChanging(System.Nullable<int> value);
    partial void OnSkill_BChanged();
    partial void OnSkill_B_PointsChanging(System.Nullable<short> value);
    partial void OnSkill_B_PointsChanged();
    #endregion
		
		public Decoration()
		{
			this._Decoration_Ingredients = new EntitySet<Decoration_Ingredient>(new Action<Decoration_Ingredient>(this.attach_Decoration_Ingredients), new Action<Decoration_Ingredient>(this.detach_Decoration_Ingredients));
			this._Item1 = default(EntityRef<Item>);
			this._SkillA = default(EntityRef<Skill_Tree>);
			this._SkillB = default(EntityRef<Skill_Tree>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item", DbType="Int NOT NULL")]
		public int Item
		{
			get
			{
				return this._Item;
			}
			set
			{
				if ((this._Item != value))
				{
					if (this._Item1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemChanging(value);
					this.SendPropertyChanging();
					this._Item = value;
					this.SendPropertyChanged("Item");
					this.OnItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Slots", DbType="TinyInt NOT NULL")]
		public byte Slots
		{
			get
			{
				return this._Slots;
			}
			set
			{
				if ((this._Slots != value))
				{
					this.OnSlotsChanging(value);
					this.SendPropertyChanging();
					this._Slots = value;
					this.SendPropertyChanged("Slots");
					this.OnSlotsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Skill A]", Storage="_Skill_A", DbType="Int NOT NULL")]
		public int Skill_A
		{
			get
			{
				return this._Skill_A;
			}
			set
			{
				if ((this._Skill_A != value))
				{
					this.OnSkill_AChanging(value);
					this.SendPropertyChanging();
					this._Skill_A = value;
					this.SendPropertyChanged("Skill_A");
					this.OnSkill_AChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Skill A Points]", Storage="_Skill_A_Points", DbType="SmallInt NOT NULL")]
		public short Skill_A_Points
		{
			get
			{
				return this._Skill_A_Points;
			}
			set
			{
				if ((this._Skill_A_Points != value))
				{
					this.OnSkill_A_PointsChanging(value);
					this.SendPropertyChanging();
					this._Skill_A_Points = value;
					this.SendPropertyChanged("Skill_A_Points");
					this.OnSkill_A_PointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Skill B]", Storage="_Skill_B", DbType="Int")]
		public System.Nullable<int> Skill_B
		{
			get
			{
				return this._Skill_B;
			}
			set
			{
				if ((this._Skill_B != value))
				{
					this.OnSkill_BChanging(value);
					this.SendPropertyChanging();
					this._Skill_B = value;
					this.SendPropertyChanged("Skill_B");
					this.OnSkill_BChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Skill B Points]", Storage="_Skill_B_Points", DbType="SmallInt")]
		public System.Nullable<short> Skill_B_Points
		{
			get
			{
				return this._Skill_B_Points;
			}
			set
			{
				if ((this._Skill_B_Points != value))
				{
					this.OnSkill_B_PointsChanging(value);
					this.SendPropertyChanging();
					this._Skill_B_Points = value;
					this.SendPropertyChanged("Skill_B_Points");
					this.OnSkill_B_PointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Decoration_Decoration_Ingredient", Storage="_Decoration_Ingredients", ThisKey="ID", OtherKey="Decoration")]
		public EntitySet<Decoration_Ingredient> Decoration_Ingredients
		{
			get
			{
				return this._Decoration_Ingredients;
			}
			set
			{
				this._Decoration_Ingredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Decoration", Storage="_Item1", ThisKey="Item", OtherKey="ID", IsForeignKey=true)]
		public Item Item1
		{
			get
			{
				return this._Item1.Entity;
			}
			set
			{
				Item previousValue = this._Item1.Entity;
				if (((previousValue != value) 
							|| (this._Item1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item1.Entity = null;
						previousValue.Decorations.Remove(this);
					}
					this._Item1.Entity = value;
					if ((value != null))
					{
						value.Decorations.Add(this);
						this._Item = value.ID;
					}
					else
					{
						this._Item = default(int);
					}
					this.SendPropertyChanged("Item1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Tree_Decoration", Storage="_SkillA", ThisKey="Skill_A", OtherKey="ID", IsForeignKey=true)]
		public Skill_Tree SkillA
		{
			get
			{
				return this._SkillA.Entity;
			}
			set
			{
				Skill_Tree previousValue = this._SkillA.Entity;
				if (((previousValue != value) 
							|| (this._SkillA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SkillA.Entity = null;
						previousValue.Decorations.Remove(this);
					}
					this._SkillA.Entity = value;
					if ((value != null))
					{
						value.Decorations.Add(this);
						this._Skill_A = value.ID;
					}
					else
					{
						this._Skill_A = default(int);
					}
					this.SendPropertyChanged("SkillA");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Tree_Decoration1", Storage="_SkillB", ThisKey="Skill_B", OtherKey="ID", IsForeignKey=true)]
		public Skill_Tree SkillB
		{
			get
			{
				return this._SkillB.Entity;
			}
			set
			{
				Skill_Tree previousValue = this._SkillB.Entity;
				if (((previousValue != value) 
							|| (this._SkillB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SkillB.Entity = null;
						previousValue.Decorations1.Remove(this);
					}
					this._SkillB.Entity = value;
					if ((value != null))
					{
						value.Decorations1.Add(this);
						this._Skill_B = value.ID;
					}
					else
					{
						this._Skill_B = default(Nullable<int>);
					}
					this.SendPropertyChanged("SkillB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Decoration_Ingredients(Decoration_Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Dec = this;
		}
		
		private void detach_Decoration_Ingredients(Decoration_Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Dec = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="skills.[Skill Tree]")]
	public partial class Skill_Tree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Tree;
		
		private EntitySet<Skill> _Skills;
		
		private EntitySet<Decoration> _Decorations;
		
		private EntitySet<Decoration> _Decorations1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTreeChanging(string value);
    partial void OnTreeChanged();
    #endregion
		
		public Skill_Tree()
		{
			this._Skills = new EntitySet<Skill>(new Action<Skill>(this.attach_Skills), new Action<Skill>(this.detach_Skills));
			this._Decorations = new EntitySet<Decoration>(new Action<Decoration>(this.attach_Decorations), new Action<Decoration>(this.detach_Decorations));
			this._Decorations1 = new EntitySet<Decoration>(new Action<Decoration>(this.attach_Decorations1), new Action<Decoration>(this.detach_Decorations1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tree", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Tree
		{
			get
			{
				return this._Tree;
			}
			set
			{
				if ((this._Tree != value))
				{
					this.OnTreeChanging(value);
					this.SendPropertyChanging();
					this._Tree = value;
					this.SendPropertyChanged("Tree");
					this.OnTreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Tree_Skill", Storage="_Skills", ThisKey="ID", OtherKey="Tree")]
		public EntitySet<Skill> Skills
		{
			get
			{
				return this._Skills;
			}
			set
			{
				this._Skills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Tree_Decoration", Storage="_Decorations", ThisKey="ID", OtherKey="Skill_A")]
		public EntitySet<Decoration> Decorations
		{
			get
			{
				return this._Decorations;
			}
			set
			{
				this._Decorations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Tree_Decoration1", Storage="_Decorations1", ThisKey="ID", OtherKey="Skill_B")]
		public EntitySet<Decoration> Decorations1
		{
			get
			{
				return this._Decorations1;
			}
			set
			{
				this._Decorations1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Skills(Skill entity)
		{
			this.SendPropertyChanging();
			entity.Skill_Tree = this;
		}
		
		private void detach_Skills(Skill entity)
		{
			this.SendPropertyChanging();
			entity.Skill_Tree = null;
		}
		
		private void attach_Decorations(Decoration entity)
		{
			this.SendPropertyChanging();
			entity.SkillA = this;
		}
		
		private void detach_Decorations(Decoration entity)
		{
			this.SendPropertyChanging();
			entity.SkillA = null;
		}
		
		private void attach_Decorations1(Decoration entity)
		{
			this.SendPropertyChanging();
			entity.SkillB = this;
		}
		
		private void detach_Decorations1(Decoration entity)
		{
			this.SendPropertyChanging();
			entity.SkillB = null;
		}
	}
}
#pragma warning restore 1591
